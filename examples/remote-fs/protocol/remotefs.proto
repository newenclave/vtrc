package vtrc_example;
option cc_generic_services = true;

message fs_handle {
    optional uint32 value = 1;
}

// fs directory operations;
message fs_handle_path {
    optional fs_handle  handle = 1;
    optional string     path   = 2;
}

message fs_element_info {
    optional bool is_exist      = 1;
    optional bool is_directory  = 2;
    optional bool is_empty      = 3;
    optional bool is_regular    = 4;
    optional bool is_symlink    = 5;

}

message fs_iterator_info {
    optional fs_handle  handle = 1;
    optional string     path   = 2; // path
    optional bool       end    = 3; // this is last one
}

service remote_fs {

    // open instance
    rpc open(fs_handle_path) returns (fs_handle_path);

    // cd instance path
    rpc cd  (fs_handle_path) returns (fs_handle_path);
    // get path by handle
    rpc pwd (fs_handle_path) returns (fs_handle_path);

    // check if path exists
    rpc exists(fs_handle_path) returns (fs_element_info);

    // get path info
    rpc info(fs_handle_path) returns (fs_element_info);

    // iterate directory
    rpc iter_begin( fs_handle_path ) returns(fs_iterator_info);
    rpc iter_next (fs_iterator_info) returns(fs_iterator_info);
    rpc iter_info (fs_iterator_info) returns( fs_element_info);
    rpc iter_clone(fs_iterator_info) returns(fs_iterator_info);

    // close instance or iterator
    rpc close(fs_handle) returns (fs_handle);
}

// files operations
service remote_file {

}
