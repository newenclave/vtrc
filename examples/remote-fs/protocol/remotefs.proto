
package vtrc_example;
option cc_generic_services = true;

message fs_handle {
    optional uint32 value = 1;
}

message file_position {
    optional uint64 position = 1;
}

message empty { }

// fs directory operations;
message fs_handle_path {
    optional fs_handle  handle = 1;
    optional string     path   = 2;
}

message fs_element_info {
    optional bool is_exist      = 1;
    optional bool is_directory  = 2;
    optional bool is_empty      = 3;
    optional bool is_regular    = 4;
    optional bool is_symlink    = 5;

}

message fs_iterator_info {
    optional fs_handle  handle = 1;
    optional string     path   = 2; // path
    optional bool       end    = 3; // this is last one
}

service remote_fs {

    // open instance
    rpc open(fs_handle_path)        returns (fs_handle_path);

    // change instance path
    rpc cd  (fs_handle_path)        returns (fs_handle_path);

    // get path by handle
    rpc pwd (fs_handle_path)        returns (fs_handle_path);

    // check if path exists
    rpc exists(fs_handle_path)      returns (fs_element_info);

    // get file size
    rpc file_size(fs_handle_path)   returns (file_position);

    // get path info
    rpc info(fs_handle_path)        returns (fs_element_info);

    // make directory
    rpc mkdir(fs_handle_path)       returns (fs_handle_path);

    // del fs element
    rpc del(fs_handle_path)         returns (fs_handle_path);

    // iterate directory
    rpc iter_begin( fs_handle_path ) returns(fs_iterator_info);
    rpc iter_next (fs_iterator_info) returns(fs_iterator_info);
    rpc iter_info (fs_iterator_info) returns( fs_element_info);
    rpc iter_clone(fs_iterator_info) returns(fs_iterator_info);

    // close instance or iterator;
    rpc close(fs_handle) returns (fs_handle);

}

message file_open_req {
    optional string path = 1;
    optional string mode = 2;
}

enum file_position_whence {
    POS_SEEK_SET  = 0;
    POS_SEEK_CUR  = 1;
    POS_SEEK_END  = 2;
}

message file_set_position {
    optional fs_handle  hdl      = 1;
    optional int64      position = 2;
    optional uint32     whence   = 3;
}

message file_data_block {
    optional fs_handle  hdl     = 1;
    optional bytes      data    = 2;
    optional uint32     length  = 3;
}


// files operations
service remote_file {

    rpc open(file_open_req) returns (fs_handle);
    rpc close(fs_handle)    returns (fs_handle);

    rpc tell(fs_handle)         returns (file_position);
    rpc seek(file_set_position) returns (file_position);


    rpc read(file_data_block)  returns (file_data_block);
    rpc write(file_data_block) returns (file_data_block);

    rpc flush_file(fs_handle)       returns (empty);
}

